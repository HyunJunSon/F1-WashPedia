name: Java CI with Gradle WashPedia Project

on:
  push:
    branches: [ "develop_CI" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      ## jdk setting
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      ## application.yml 생성 후 secret 값 복붙

      # Gradle Build를 위한 권한 부여
      - name: Grant execute permission for gradlew
        working-directory: ./module-api
        run: chmod +x ./gradlew

      # Gradle Build (test 제외)
      - name: Build with Gradle
        working-directory: ./module-api
        #run: ./gradlew build -x test
        run: ./gradlew build

      # INSTALL SSH-PASS
      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      #SEND JAR
      - name: Copy JAR file to remote server using SCP
        run: |
          cd module-api/build/libs/ && \
          export PASSWORD="${{ secrets.VULTR_PW }}" && \
          sshpass -p "$PASSWORD" scp -o StrictHostKeyChecking=no -P 22 module-api-0.0.1-SNAPSHOT.jar ${{ secrets.VULTR_USER_NAME }}@${{ secrets.VULTR_IP }}:/root

      # CONNECT TERMINAL
      - name: Application Run
        run: |
          sshpass -p ${{ secrets.VULTR_PW }} \
          ssh -o StrictHostKeyChecking=no -A ${{ secrets.VULTR_USER_NAME }}@${{ secrets.VULTR_IP }} \
          "JAR_NAME='module-api-0.0.1-SNAPSHOT.jar'; \
          echo '> 현재 실행 중인 애플리케이션 pid 확인' && \
          CURRENT_PID=\$(pgrep -f \$JAR_NAME) && \
          if [ -z \"\$CURRENT_PID\" ]; then \
            echo '> kill -9 \$CURRENT_PID' && \
            sudo kill -9 \$CURRENT_PID && \
            sleep 5 && \
            echo '> 이전 애플리케이션이 종료되었습니다.'; \
          fi && \
          nohup java -jar \$JAR_NAME --jasypt.encryptor.password="${{ secrets.PUBLIC_KEY }}" >> ~/deploy.log 2> ~/deploy_err.log & \
          echo '> 새로운 애플리케이션이 실행되었습니다.'"
    
